var trans = require('../model/transactionmodel');
var books = require('../model/bookmodel');
var user = require('../model/indexmodel');

exports.issueBook = async (req, res) => {
    const { bookId, userId, issueDate } = req.body;

    try {
        const newTransaction = new trans({
            bookId,
            userId,
            issueDate,
            returnDate: null, 
            rent: null         
        });

        await newTransaction.save();
        res.status(200).json({ 
          status: 'Book issued successfully', 
          transaction: newTransaction 
        });
    } catch (error) {
        res.status(404).json({
           error 
          });
    }
  };
  exports.returnBook = async (req, res) => {
    const { bookId, userId, returnDate } = req.body;

  try {
    const transaction = await trans.findOne({ bookId, userId, returnDate: null });
    if (!transaction) return res.status(404).json({ message: 'Transaction not found' });

    transaction.returnDate = returnDate;

    const daysRented = Math.ceil((new Date(returnDate) - new Date(transaction.issueDate)) / (1000 * 3600 * 24));
    const book = await books.findById(bookId);
    transaction.rentGenerated = daysRented * book.rentPerDay;

    await transaction.save();
    res.status(200).json({ 
      status: 'Book returned', 
      transaction 
    });
  } catch (err) {
    res.status(500).json({ error });
  }
  };
  exports.getPeopleByBook = async (req, res) => {
    try {
      const { bookId } = req.query;
      const transactions = await trans.find({ bookId }).populate('userId');
      const currentlyIssued = transactions.trans.find(t => !t.returnDate);
      res.status(200).json({ 
        status:'view people book',
        transactions,
        currentlyIssued 
      });
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  };
  
  // Get total rent generated by a book
  exports.getTotalRentByBook = async (req, res) => {
    try {
      const { bookId } = req.query;
      const transactions = await trans.find({ bookId });
      const totalRent = transactions.reduce((acc, curr) => acc + curr.rentGenerated, 0);
      res.status(200).json({ 
        status:'view total book',totalRent });
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  };
  
  exports.getBooksByUser = async (req, res) => {
    try {
      const { userId } = req.query;
      const transactions = await trans.find({ userId }).populate('bookId');
      res.status(200).json({ 
        status:'view people book user',
        transactions});
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  };
  
  exports.getBooksByDateRange = async (req, res) => {
    try {
      const { startDate, endDate } = req.query;
      const transactions = await trans.find({
        issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
      }).populate('bookId userId');
      res.status(200).json({ 
        status:'view book date range',
        transactions});
    } catch (err) {
      res.status(500).json({ message: err.message });
    }
  };